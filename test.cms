--[[
    Possible data types:
    bool/boolean => 8bit signed (<= 0 = false, > 0 = true)

    byte/uint8 => 8bit unsigned (0 -> 255)
    sbyte/int8 => 8bit signed (-128 -> +127)
    
    char => 16bit unsigned (0 -> 65,535)
    
    short/int16 => 16 bit signed (-32,768 -> 32,767)
    ushort/uint16 => 16 bit unsigned (0 -> 65,535)
    
    int/int32 => 32 bit signed (-2,147,483,648 -> 2,147,483,647)
    uint/uint32 => 32 bit unsigned (0 -> 4,294,967,295)

    long => 64 bit signed (-9,223,372,036,854,775,808 -> 9,223,372,036,854,775,807)
    ulong => 64 bit unsigned (0 -> 18,446,744,073,709,551,615)

    float/single => 32 bit floating point (-3.40282347E+38 -> 3.40282347E+38)
    double => 64 bit floating point (-1.7976931348623157E+308 -> 1.7976931348623157E+308)
    decimal/longdouble => 128 bit floating point (-79,228,162,514,264,337,593,543,950,335 -> 79,228,162,514,264,337,593,543,950,335)

    string => character string (max. allocated memory)

    Supported statements:
       
]]--


func foo()
    if (condition)
        print "try me"
        print "tets"
        print "oops. typo"
    endif

    if anotherCond
        print "Something"
    elseif (yetAnotherCond)
        print "Something else"
    else
        print "HALT!"
    endif
    
endfunc

func voidfunc() noret
    print "This is another function that doesn't have a return value"
endfunc

inline func add(x, y) return x + y

func bar() ret string
    // valid
    -- Another comment
    # yet again valid
    -- [[

    ]]--

    var a = "ehllo"
    var c = 'c'
    var otherC = 0x61;
endfunc

func loops()
    while x do
        if y then break
    endwhile

    repeat

    until y

    for x = 0 to 255 comp voidfunc do
        if foobar()
            x += 5
        endif
    endfor

    var i as short = -1

    count i = 0 to 65_535 do
        print i
    endcount

    count j = 65_535 to 0 do
        print j
    endcount
endfunc

# dis optional!
#func main(args...)
#   
#endfunc

print "this would be the entry point if no main defined"
foo()
